-- MySQL Script generated by MySQL Workbench
-- Mon Oct 16 01:44:59 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
-- SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
-- SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`usuario` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `role` VARCHAR(10) NOT NULL DEFAULT 'client',
  `nome` VARCHAR(100) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `senha` VARCHAR(100) NOT NULL,
  `foto` MEDIUMTEXT NULL,
  `cpf` VARCHAR(11) NULL,
  `telefone` VARCHAR(15) NULL,
  `dataNascimento` DATE NULL,
  `habilitado` TINYINT NOT NULL DEFAULT 1,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC) VISIBLE,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`endereco` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `logradouro` VARCHAR(100) NOT NULL DEFAULT '-',
  `numero` VARCHAR(5) NOT NULL DEFAULT '-',
  `cidade` VARCHAR(100) NOT NULL DEFAULT '-',
  `uf` VARCHAR(2) NOT NULL DEFAULT '-',
  `cep` VARCHAR(9) NOT NULL DEFAULT '-',
  `complemento` VARCHAR(100) NULL DEFAULT '-',
  `usuario_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_endereco_usuario_idx` (`usuario_id` ASC) VISIBLE,
  CONSTRAINT `fk_endereco_usuario`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
ROW_FORMAT = DEFAULT;


-- -----------------------------------------------------
-- Table `mydb`.`produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`produto` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NOT NULL,
  `descricao` VARCHAR(255) NOT NULL,
  `categoria` VARCHAR(45) NOT NULL,
  `preco` FLOAT NOT NULL DEFAULT 0.0,
  `desconto` FLOAT NOT NULL DEFAULT 0.0,
  `precoFinal` FLOAT NOT NULL DEFAULT 0.0,
  `caracteristicas` VARCHAR(255) NOT NULL,
  `foto` MEDIUMTEXT NOT NULL,
  `disponibilidade` TINYINT NOT NULL DEFAULT 1,
  `avaliacaoMedia` FLOAT NOT NULL DEFAULT 0.0,
  `avaliacaoTotal` INT(10) NOT NULL DEFAULT 0,
  `quantidade` INT(10) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`compra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`compra` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `dataRegistro` DATE NOT NULL,
  `statusCompra` VARCHAR(45) NOT NULL DEFAULT 'Aguardando Pagamento',
  `total` FLOAT NOT NULL,
  `usuario_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_compra_usuario_idx` (`usuario_id` ASC) VISIBLE,
  CONSTRAINT `fk_compra_usuario`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`endereco_entrega`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`endereco_entrega` (
  `logradouro` VARCHAR(100) NOT NULL,
  `numero` VARCHAR(5) NOT NULL,
  `cidade` VARCHAR(100) NOT NULL,
  `uf` VARCHAR(2) NOT NULL,
  `cep` VARCHAR(9) NOT NULL,
  `complemento` VARCHAR(100) NULL,
  `compra_id` INT NOT NULL,
  PRIMARY KEY (`compra_id`),
  UNIQUE INDEX `compra_id_UNIQUE` (`compra_id` ASC) VISIBLE,
  CONSTRAINT `fk_endereco_entrega_compra`
    FOREIGN KEY (`compra_id`)
    REFERENCES `mydb`.`compra` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`carrinho`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`carrinho` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `total` FLOAT NOT NULL DEFAULT 0.0,
  `usuario_id` INT NOT NULL,
  INDEX `fk_carrinho_usuario_idx` (`usuario_id` ASC) VISIBLE,
  UNIQUE INDEX `usuario_id_UNIQUE` (`usuario_id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_carrinho_usuario`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`item_carrinho`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`item_carrinho` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `carrinho_id` INT NOT NULL,
  `produto_id` INT NOT NULL,
  `quantidade` INT NOT NULL DEFAULT 1,
  `total` FLOAT NOT NULL DEFAULT 0.0,
  INDEX `fk_item_carrinho_produto_idx` (`produto_id` ASC) INVISIBLE,
  INDEX `fk_item_carrinho_carrinho_idx` (`carrinho_id` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_item_carrinho_produto`
    FOREIGN KEY (`produto_id`)
    REFERENCES `mydb`.`produto` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_item_carrinho`
    FOREIGN KEY (`carrinho_id`)
    REFERENCES `mydb`.`carrinho` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`item_compra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`item_compra` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `quantidade` INT NOT NULL,
  `compra_id` INT NOT NULL,
  `produto_id` INT NOT NULL,
  `total` FLOAT NOT NULL DEFAULT 0.0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_item_compra_idx` (`compra_id` ASC) VISIBLE,
  INDEX `fk_item_compra_produto_idx` (`produto_id` ASC) VISIBLE,
  CONSTRAINT `fk_item_compra_compra`
    FOREIGN KEY (`compra_id`)
    REFERENCES `mydb`.`compra` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_item_compra_produto`
    FOREIGN KEY (`produto_id`)
    REFERENCES `mydb`.`produto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`avaliacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`avaliacao` (
  `nota` INT(1) NOT NULL,
  `usuario_id` INT NOT NULL,
  `produto_id` INT NOT NULL,
  PRIMARY KEY (`usuario_id`, `produto_id`),
  INDEX `fk_avaliacao_usuario_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `fk_avaliacao_produto_idx` (`produto_id` ASC) VISIBLE,
  CONSTRAINT `fk_avaliacao_usuario`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_avaliacao_produto`
    FOREIGN KEY (`produto_id`)
    REFERENCES `mydb`.`produto` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`usuario_AFTER_INSERT` AFTER INSERT ON `usuario` FOR EACH ROW
BEGIN
    INSERT INTO `endereco` (`usuario_id`) VALUES (NEW.id);
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`produto_BEFORE_UPDATE` BEFORE UPDATE ON `produto` FOR EACH ROW
BEGIN
	-- COMPUTAÇÃO DO PRECO FINAL BASEADO NO PRECO E DESCONTO
	IF NEW.preco <> OLD.preco OR NEW.desconto <> OLD.desconto THEN
		SET NEW.precoFinal = NEW.preco - NEW.desconto;
    END IF;
    
    -- DISPONIBILIDADE DO PRODUTO BASEADO NA QUANTIDADE
	SET NEW.disponibilidade = NEW.quantidade > 0;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`item_carrinho_BEFORE_INSERT` BEFORE INSERT ON `item_carrinho` FOR EACH ROW
BEGIN
	SET NEW.total = NEW.quantidade * (SELECT p.precoFinal FROM `produto` p WHERE p.id = NEW.produto_id);
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`item_carrinho_AFTER_INSERT` AFTER INSERT ON `item_carrinho` FOR EACH ROW
BEGIN
	UPDATE `carrinho`
    SET total = (SELECT SUM(i.total) FROM item_carrinho i WHERE i.carrinho_id = NEW.carrinho_id)
    WHERE id = NEW.carrinho_id;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`item_carrinho_BEFORE_UPDATE` BEFORE UPDATE ON `item_carrinho` FOR EACH ROW
BEGIN
	-- COMPUTAÇÃO DO PRECO TOTAL DO ITEM BASEADO NA QUANTIDADE E NO VALOR FINAL DO PRODUTO
	IF NEW.quantidade <> OLD.quantidade THEN
		SET NEW.total = NEW.quantidade * (SELECT p.precoFinal FROM `produto` p WHERE p.id = NEW.produto_id);
    END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`item_carrinho_AFTER_UPDATE` AFTER UPDATE ON `item_carrinho` FOR EACH ROW
BEGIN
	-- COMPUTAÇÃO DO PRECO TOTAL DO CARRINHO BASEADO NO TOTAL DOS ITENS
	IF NEW.quantidade <> OLD.quantidade THEN
		UPDATE `carrinho`
		SET total = (SELECT SUM(i.total) FROM item_carrinho i WHERE i.carrinho_id = NEW.carrinho_id)
		WHERE id = NEW.carrinho_id;
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`item_carrinho_AFTER_DELETE` AFTER DELETE ON `item_carrinho` FOR EACH ROW
BEGIN
	UPDATE `carrinho`
    SET total = (SELECT IFNULL(SUM(i.total), 0.0) FROM item_carrinho i WHERE i.carrinho_id = OLD.carrinho_id)
    WHERE id = OLD.carrinho_id;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`avaliacao_AFTER_INSERT` AFTER INSERT ON `avaliacao` FOR EACH ROW
BEGIN
	UPDATE `produto` p SET
		p.avaliacaoMedia = (SELECT AVG(a.nota) FROM avaliacao a WHERE a.produto_id = p.id),
		p.avaliacaoTotal = (SELECT COUNT(*) FROM avaliacao a WHERE a.produto_id = p.id)
		WHERE p.id = NEW.produto_id;
END$$


DELIMITER ;

-- SET SQL_MODE=@OLD_SQL_MODE;
-- SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
-- SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
